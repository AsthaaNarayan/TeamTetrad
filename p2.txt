import random
import json
import pickle
from typing import List, Any

import np as np
import numpy as np

import nltk
import patterns as patterns
from nltk.stem import WordNetLemmatizer

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation , Dropout
from tensorflow.keras.optimizers import SGD

lemmatizer = WordNetLemmatizer()

intents = json.loads(open('intents.json').read())

words = []
classes = []
documents = []
ignore_letters = ['?','!','.',',']

for intent in intents['intents']:
    for pattern in intent['patterns']:
        word_list = nltk.tokenize(pattern)
        words.extend(word_list)
        documents.append((word_list,intent["tag"]))
        if intent['tag'] not in classes:
            classes.append(intent['tag'])
words = [lemmatizer.lemmatize(word)for word in words if word not in ignore_letters]
words = sorted(set(words))
classes = sorted(set(classes))
pickle.dump(words, open('words.pk1', 'wb'))
pickle.dump(words, open('classes.pk1', 'wb'))
training = []
output_empty= [0] *  len(classes)


def lemmatize(param):
    pass


for document in documents:
    bag=[]
    word_patterns=document[0]
    word_patterns=[[lemmatizer,lemmatize(word.lower())for word in word patterns]
    for word in words:
       bag.append(1) if word in word_patterns else bag.append(0)
    output_row=list(output_empty)
    output_row[classes.index(document[1])] = 1
    training.append([bag,output_row])
random.shuffle(training)
training = np.array(training)
train_x = list





